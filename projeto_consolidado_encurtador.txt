====================================================================================================
🚀 PROJETO DJANGO: ENCURTADOR DE URL - ANÁLISE COMPLETA
====================================================================================================

📋 PROJETO: ENCURTADOR-URL
🎯 TIPO: Django URL Shortener
📅 ESTRUTURA CAPTURADA EM: C:\Users\LUCAS\Desktop\CODE\url-shortener

📁 ESTRUTURA DO PROJETO:
──────────────────────────────────────────────────
├── 📁 ENCURTADOR-URL/
│ ├── 📄 consolidar_projeto.py
│ ├── 📄 manage.py
│ └── 📄 requirements.txt
│ ├── 📁 shortener/
│ │ ├── 📄 __init__.py
│ │ ├── 📄 admin.py
│ │ ├── 📄 apps.py
│ │ ├── 📄 forms.py
│ │ ├── 📄 models.py
│ │ ├── 📄 tests.py
│ │ ├── 📄 urls.py
│ │ └── 📄 views.py
│ │ ├── 📁 static/
│ │ │ ├── 📁 shortener/
│ │ │ │ └── 📄 style.css
│ │ ├── 📁 templates/
│ │ │ ├── 📁 shortener/
│ │ │ │ ├── 📄 base.html
│ │ │ │ ├── 📄 expired.html
│ │ │ │ ├── 📄 index.html
│ │ │ │ └── 📄 status.html
│ ├── 📁 url_shortener_project/
│ │ ├── 📄 __init__.py
│ │ ├── 📄 asgi.py
│ │ ├── 📄 settings.py
│ │ ├── 📄 urls.py
│ │ └── 📄 wsgi.py

====================================================================================================
📝 CONTEÚDO DOS ARQUIVOS PRINCIPAIS:
====================================================================================================

=========================🎯 ARQUIVOS PRINCIPAIS (ALTA PRIORIDADE)==========================

────────────────────────────────────────────────────────────────────────────────
🏷️ ARQUIVO: manage.py
📁 LOCALIZAÇÃO: raiz
────────────────────────────────────────────────────────────────────────────────
#!/usr/bin/env python
"""Django's command-line utility for administrative tasks."""
import os
import sys


def main():
    """Run administrative tasks."""
    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'url_shortener_project.settings')
    try:
        from django.core.management import execute_from_command_line
    except ImportError as exc:
        raise ImportError(
            "Couldn't import Django. Are you sure it's installed and "
            "available on your PYTHONPATH environment variable? Did you "
            "forget to activate a virtual environment?"
        ) from exc
    execute_from_command_line(sys.argv)


if __name__ == '__main__':
    main()

────────────────────────────────────────────────────────────────────────────────
🏷️ ARQUIVO: requirements.txt
📁 LOCALIZAÇÃO: raiz
────────────────────────────────────────────────────────────────────────────────
⚠️ [ARQUIVO BINÁRIO OU COM CODIFICAÇÃO DIFERENTE - NÃO PODE SER EXIBIDO COMO TEXTO]

=====================================🎨 TEMPLATES HTML=====================================

────────────────────────────────────────────────────────────────────────────────
🏷️ ARQUIVO: shortener\templates\shortener\base.html
📁 LOCALIZAÇÃO: shortener\templates\shortener
────────────────────────────────────────────────────────────────────────────────
{# shortener/templates/shortener/base.html #}
{% load static %} {# Carrega as tags para lidar com arquivos estáticos #}
<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Encurtador de URLs{% endblock %}</title>
    {# Link para o arquivo CSS estático #}
    <link rel="stylesheet" href="{% static 'shortener/style.css' %}">
    {# Opcional: Link para um framework CSS como Bootstrap ou Tailwind #}
</head>
<body>
    {# O container agora está centralizado pelo body via flexbox #}
    <div class="container">
        {% block content %}
        {# Conteúdo específico de cada página virá aqui #}
        {% endblock %}
    </div>

    {# Opcional: Scripts JavaScript #}
    {# <script src="{% static 'shortener/script.js' %}"></script> #}
</body>
</html>

────────────────────────────────────────────────────────────────────────────────
🏷️ ARQUIVO: shortener\templates\shortener\expired.html
📁 LOCALIZAÇÃO: shortener\templates\shortener
────────────────────────────────────────────────────────────────────────────────
{# shortener/templates/shortener/expired.html #}
{% extends 'shortener/base.html' %}

{% block title %}Link Expirado{% endblock %}

{% block content %}
    <h1>Link Expirado ou Não Encontrado</h1>
    <p>O link com o código <strong>{{ short_code }}</strong> expirou ou não existe mais.</p>
    <p><a href="{% url 'index' %}">Voltar para a página inicial para encurtar uma nova URL.</a></p>
{% endblock %}

────────────────────────────────────────────────────────────────────────────────
🏷️ ARQUIVO: shortener\templates\shortener\index.html
📁 LOCALIZAÇÃO: shortener\templates\shortener
────────────────────────────────────────────────────────────────────────────────
{# shortener/templates/shortener/index.html #}
{% extends 'shortener/base.html' %} {# Herda do template base #}
{% load static %} {# Carrega tags para estáticos e urls #}

{% block title %}Encurtar URL{% endblock %} {# Define o título da página #}

{% block content %}
    <h1>Encurtador de URLs</h1>

    <form method="post">
        {% csrf_token %} {# Obrigatório para formulários POST no Django #}
        {{ form.as_p }} {# Renderiza o formulário como parágrafos. O CSS estilizará os <p> e <label> dentro do form #}
        <button type="submit">Encurtar</button>
    </form>

    {# Exibe o resultado se uma URL curta foi criada na submissão POST #}
    {% if short_url_object %}
        {# Adicionada a classe 'result' para estilização específica #}
        <div class="result">
            <h2>URL Encurtada Criada:</h2>
            {# Usa a tag url para gerar o link correto para a URL curta de redirecionamento #}
            {% url 'redirect_short_url' short_code=short_url_object.short_code as short_url %}
            <p>
                Seu link: <a href="{{ short_url }}">{{ request.build_absolute_uri }}{{ short_url_object.short_code }}/</a>
                {# request.build_absolute_uri constrói o URL completo (esquema + host + path) #}
            </p>
            <p>
                URL Original: <a href="{{ short_url_object.long_url }}" target="_blank">{{ short_url_object.long_url }}</a>
            </p>
            {% if short_url_object.expires_at %}
                <p>Expira em: {{ short_url_object.expires_at|date:"d/m/Y H:i" }}</p> {# Formata a data #}
            {% else %}
                <p>Não expira.</p>
            {% endif %}
            {# Opcional: Botão para copiar para área de transferência #}
            <button onclick="copyToClipboard('{{ request.build_absolute_uri }}{{ short_url_object.short_code }}/')">Copiar Link</button>
            {# --- Adicionado: Link para a página de status da URL recém-criada --- #}
            <p><a href="{% url 'status_short_url' short_code=short_url_object.short_code %}">Ver Status</a></p>
        </div>
    {% endif %}

    {# --- Adicionado: Seção para listar todas as URLs encurtadas --- #}
    <h2>Todas as URLs Encurtadas</h2>
    {# Adicionada a classe 'url-list' para estilização da lista #}
    <div class="url-list">
        {% if all_urls %} {# Verifica se a lista de URLs não está vazia #}
            <ul>
                {# Itera sobre cada objeto ShortUrl na lista 'all_urls' passada pela view #}
                {% for url in all_urls %}
                    <li>
                        {# Exibe a URL longa e o link para a URL curta #}
                        {{ url.long_url }} -> <a href="{% url 'redirect_short_url' short_code=url.short_code %}">{{ request.build_absolute_uri }}{{ url.short_code }}/</a>
                        {# --- Adicionado: Link para a página de status para cada item na lista --- #}
                        {# Adicionada a classe 'status-link' para estilização específica do link de status #}
                        <a href="{% url 'status_short_url' short_code=url.short_code %}" class="status-link">(Status)</a>
                        {# Opcional: Exibir data de criação ou expiração aqui também, se desejar #}
                    </li>
                {% endfor %}
            </ul>
        {% else %}
            <p>Nenhuma URL encurtada ainda.</p> {# Mensagem exibida se não houver URLs no banco #}
        {% endif %}
    </div>

    {# Script para copiar para área de transferência (opcional) #}
    <script>
        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(function() {
                console.log('Texto copiado para a área de transferência');
                // Opcional: Mostrar uma mensagem de sucesso para o usuário
                alert('Link copiado!');
            }, function(err) {
                console.error('Erro ao copiar texto: ', err);
                alert('Erro ao copiar link. Por favor, tente manualmente.'); // Mensagem de erro
            });
        }
    </script>

{% endblock %}

────────────────────────────────────────────────────────────────────────────────
🏷️ ARQUIVO: shortener\templates\shortener\status.html
📁 LOCALIZAÇÃO: shortener\templates\shortener
────────────────────────────────────────────────────────────────────────────────
{# shortener/templates/shortener/status.html #}
{% extends 'shortener/base.html' %} {# Herda do template base #}
{% load static %} {# Carrega tags para estáticos #}
{% load humanize %} {# Carrega tags do app humanize para formatação de números (opcional) #}

{% block title %}Status da URL: {{ short_url_object.short_code }}{% endblock %} {# Define o título com o código curto #}

{% block content %}
    <h1>Status da URL Encurtada</h1>

    {# Verifica se o objeto short_url_object foi passado pela view (deve ser sempre True com get_object_or_404) #}
    {% if short_url_object %}
        {# Adicionada a classe 'status-details' para estilização específica #}
        <div class="status-details">
            {# Exibe os detalhes do objeto ShortUrl #}
            <p><strong>Código Curto:</strong> {{ short_url_object.short_code }}</p>

            {# Constrói o URL completo para o link de redirecionamento #}
            {% url 'redirect_short_url' short_code=short_url_object.short_code as short_url %}
            <p><strong>Link Completo:</strong> <a href="{{ short_url }}" target="_blank">{{ request.build_absolute_uri }}{{ short_url_object.short_code }}/</a></p>
            {# target="_blank" abre o link em uma nova aba #}

            <p><strong>URL Original:</strong> <a href="{{ short_url_object.long_url }}" target="_blank">{{ short_url_object.long_url }}</a></p>

            {# Exibe a data de criação formatada #}
            <p><strong>Criado em:</strong> {{ short_url_object.created_at|date:"d/m/Y H:i" }}</p>

            {# Verifica se a URL tem data de expiração #}
            {% if short_url_object.expires_at %}
                <p><strong>Expira em:</strong> {{ short_url_object.expires_at|date:"d/m/Y H:i" }}</p>
                {# Verifica se o link já expirou usando o método is_expired do modelo #}
                {% if short_url_object.is_expired %}
                     {# Adicionada a classe 'expired-message' para estilização específica #}
                     <p class="expired-message">(Este link expirou)</p> {# Mensagem de expiração #}
                {% endif %}
            {% else %}
                <p><strong>Expiração:</strong> Não expira.</p> {# Mensagem se não tiver expiração #}
            {% endif %}

            {# Exibe a contagem de cliques #}
            {# Usa o filtro intcomma do humanize para formatar o número (ex: 1,234) #}
            <p><strong>Cliques:</strong> {{ short_url_object.clicks|intcomma }}</p>
            {# Se não usar humanize, use apenas: <p><strong>Cliques:</strong> {{ short_url_object.clicks }}</p> #}

            {# Opcional: Botão para copiar o link curto para área de transferência #}
            <button onclick="copyToClipboard('{{ request.build_absolute_uri }}{{ short_url_object.short_code }}/')">Copiar Link Curto</button>
        </div>
    {% else %}
        <p>URL curta não encontrada.</p> {# Mensagem de fallback (não deve ser vista com get_object_or_404) #}
    {% endif %}

    {# Link para voltar para a página inicial #}
    <p><a href="{% url 'index' %}">Voltar para a página inicial</a></p>

    {# Script para copiar para área de transferência (opcional) - Replicado do index.html #}
    <script>
        function copyToClipboard(text) {
            navigator.clipboard.writeText(text).then(function() {
                console.log('Texto copiado para a área de transferência');
                alert('Link copiado!');
            }, function(err) {
                console.error('Erro ao copiar texto: ', err);
                alert('Erro ao copiar link. Por favor, tente manualmente.'); // Mensagem de erro
            });
        }
    </script>

{% endblock %}

======================================🎨 ARQUIVOS CSS======================================

==================================⚙️ ARQUIVOS JAVASCRIPT==================================

────────────────────────────────────────────────────────────────────────────────
🏷️ ARQUIVO: shortener\static\shortener\style.css
📁 LOCALIZAÇÃO: shortener\static\shortener
────────────────────────────────────────────────────────────────────────────────
/* shortener/static/shortener/style.css */

/* Reset básico ou normalização (opcional, mas boa prática) */
*, *::before, *::after {
    box-sizing: border-box;
}

body {
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; /* Fonte mais moderna */
    line-height: 1.6;
    margin: 0;
    padding: 0; /* Removido padding do body, o container já tem */
    background-color: #eef2f7; /* Cor de fundo suave */
    color: #333;
    display: flex; /* Usado para centralizar o container verticalmente */
    justify-content: center; /* Centraliza horizontalmente */
    align-items: center; /* Centraliza verticalmente (pode precisar de min-height: 100vh) */
    min-height: 100vh; /* Garante que o body ocupe a altura total da viewport */
    padding: 20px; /* Adiciona padding para telas menores */
}

.container {
    width: 100%; /* Ocupa a largura total em telas menores */
    max-width: 700px; /* Largura máxima para telas maiores */
    margin: 20px auto; /* Centraliza o container */
    background: #fff;
    padding: 30px; /* Aumenta o padding interno */
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1); /* Sombra mais suave */
    border-radius: 12px; /* Cantos mais arredondados */
    text-align: center; /* Centraliza o conteúdo principal */
}

h1, h2 {
    color: #0056b3; /* Cor primária */
    margin-bottom: 20px;
    text-align: center; /* Centraliza títulos */
}

h1 {
    font-size: 2.5em;
    margin-bottom: 30px;
}

h2 {
    font-size: 1.8em;
    margin-top: 30px; /* Espaço acima dos subtítulos */
    margin-bottom: 15px;
    border-bottom: 2px solid #eee; /* Linha sutil abaixo dos subtítulos */
    padding-bottom: 10px;
}

/* Estilos para o formulário */
form {
    margin-bottom: 30px;
    text-align: left; /* Alinha o conteúdo do formulário à esquerda */
}

form p {
    margin-bottom: 20px; /* Aumenta espaço entre os campos do formulário */
}

form label {
    display: block;
    margin-bottom: 8px; /* Espaço entre label e input */
    font-weight: bold;
    color: #555;
}

form input[type="url"],
form input[type="datetime-local"] {
    width: 100%; /* Ocupa 100% da largura disponível */
    padding: 12px 15px; /* Aumenta padding */
    margin-bottom: 10px;
    border: 1px solid #ccc;
    border-radius: 6px; /* Cantos arredondados */
    font-size: 1em;
    transition: border-color 0.3s ease-in-out, box-shadow 0.3s ease-in-out; /* Transição suave */
}

form input[type="url"]:focus,
form input[type="datetime-local"]:focus {
    border-color: #007bff; /* Cor da borda ao focar */
    box-shadow: 0 0 8px rgba(0, 123, 255, 0.2); /* Sombra suave ao focar */
    outline: none; /* Remove o outline padrão do navegador */
}

/* Estilos para botões */
button {
    background-color: #007bff; /* Cor primária do botão */
    color: white;
    padding: 12px 25px; /* Aumenta padding */
    border: none;
    border-radius: 6px; /* Cantos arredondados */
    cursor: pointer;
    font-size: 1.1em;
    font-weight: bold;
    transition: background-color 0.3s ease-in-out, transform 0.1s ease-in-out; /* Transição suave */
    margin-right: 10px; /* Espaço entre botões */
}

button:hover {
    background-color: #0056b3; /* Cor mais escura ao passar o mouse */
}

button:active {
    transform: scale(0.98); /* Efeito de clique */
}

/* Estilos para a seção de resultado (URL criada) */
.result {
    margin-top: 30px;
    padding: 20px;
    border: 1px solid #d4edda; /* Borda suave verde para sucesso */
    background-color: #e9f7ef; /* Fundo suave verde */
    border-radius: 8px;
    text-align: left; /* Alinha o conteúdo à esquerda */
}

.result h2 {
    color: #155724; /* Cor verde escura para o título do resultado */
    margin-top: 0;
    margin-bottom: 15px;
    border-bottom: none; /* Remove a linha de baixo */
    padding-bottom: 0;
    text-align: left;
}

.result p {
    margin-bottom: 10px;
}

.result a {
    color: #28a745; /* Cor verde para o link encurtado */
    word-break: break-all; /* Quebra a linha se a URL for muito longa */
    text-decoration: none; /* Remove sublinhado padrão */
    font-weight: bold;
}

.result a:hover {
    text-decoration: underline; /* Adiciona sublinhado ao passar o mouse */
}

/* Estilos para a seção de status */
.status-details {
    margin-top: 20px;
    padding: 20px;
    border: 1px solid #cce5ff; /* Borda suave azul */
    background-color: #e2f3ff; /* Fundo suave azul */
    border-radius: 8px;
    text-align: left; /* Alinha o conteúdo à esquerda */
}

.status-details p {
    margin-bottom: 10px;
    font-size: 1.1em;
}

.status-details strong {
    color: #004085; /* Cor azul escura para os rótulos */
}

.status-details a {
    color: #007bff; /* Cor azul para links na página de status */
    text-decoration: none;
}

.status-details a:hover {
    text-decoration: underline;
}

/* Estilo específico para a mensagem de link expirado */
.expired-message {
    color: #dc3545; /* Cor vermelha para a mensagem de expiração */
    font-weight: bold;
    margin-top: 5px;
}

/* Estilos para a lista de URLs */
.url-list {
    margin-top: 30px;
    text-align: left; /* Alinha a lista à esquerda */
}

.url-list ul {
    list-style: none; /* Remove marcadores de lista */
    padding: 0;
    margin: 0;
}

.url-list li {
    background-color: #f8f9fa; /* Fundo suave para cada item da lista */
    border: 1px solid #e9ecef;
    border-radius: 5px;
    padding: 12px 15px;
    margin-bottom: 10px;
    display: flex; /* Usa flexbox para alinhar itens na linha */
    justify-content: space-between; /* Espaça os elementos */
    align-items: center; /* Centraliza verticalmente */
    word-break: break-all; /* Quebra a linha para URLs longas */
}

.url-list li a {
     color: #007bff; /* Cor azul para links na lista */
     text-decoration: none;
     margin-left: 5px; /* Espaço entre a URL longa e o link curto */
}

.url-list li a:hover {
    text-decoration: underline;
}

.url-list li .status-link {
    font-size: 0.9em;
    margin-left: 15px; /* Espaço entre o link curto e o link de status */
    white-space: nowrap; /* Evita que o link de status quebre a linha */
}

/* Estilos para a página de link expirado/não encontrado */
.expired-page h1 {
    color: #dc3545; /* Cor vermelha para o título */
}

.expired-page p {
    font-size: 1.1em;
    text-align: center;
}

.expired-page a {
    color: #007bff;
    text-decoration: none;
}

.expired-page a:hover {
    text-decoration: underline;
}

/* Estilo para mensagens de erro do formulário (se houver) */
.errorlist {
    color: #dc3545; /* Cor vermelha para mensagens de erro */
    list-style: none;
    padding: 0;
    margin-top: 10px;
    margin-bottom: 20px;
    font-weight: bold;
}

.errorlist li {
    margin-bottom: 5px;
}

/* Responsividade básica */
@media (max-width: 600px) {
    .container {
        padding: 20px; /* Reduz padding em telas menores */
    }

    h1 {
        font-size: 2em;
    }

    h2 {
        font-size: 1.5em;
    }

    button {
        width: 100%; /* Botões ocupam a largura total */
        margin-right: 0;
        margin-bottom: 10px; /* Adiciona espaço entre botões empilhados */
    }

    .url-list li {
        flex-direction: column; /* Empilha itens da lista em telas pequenas */
        align-items: flex-start; /* Alinha itens empilhados à esquerda */
    }

    .url-list li .status-link {
        margin-left: 0;
        margin-top: 8px; /* Espaço acima do link de status */
    }
}

===============================📄 OUTROS ARQUIVOS RELEVANTES===============================

────────────────────────────────────────────────────────────────────────────────
🏷️ ARQUIVO: consolidar_projeto.py
📁 LOCALIZAÇÃO: raiz
────────────────────────────────────────────────────────────────────────────────
# consolidar_projeto.py
import os
import fnmatch
import sys # Importar sys para verificar a codificação padrão, se necessário, embora utf-8 seja padrão e bom.

def consolidar_projeto():
    # Estrutura específica do seu projeto
    # Assumimos que o script será executado a partir do diretório raiz do projeto "ENCURTADOR-URL"
    project_name = "ENCURTADOR-URL"
    root_directory = "." # O ponto indica o diretório atual (raiz do projeto)

    # Arquivos que queremos incluir (por padrão, tudo que corresponder a estes padrões)
    patterns = [
        '*.py',
        '*.html',
        '*.css',
        '*.js',
        'requirements.txt',
        '*.md',
        '*.txt'
    ]

    # Pastas a ignorar COMPLETAMENTE durante a busca
    ignore_dirs = [
        '__pycache__',
        '.git',
        'venv', # Seu ambiente virtual
        'env', # Outro nome comum para ambiente virtual
        'node_modules', # Se usar frontend com Node.js
        'staticfiles', # Django collectstatic
        '.vscode', # Arquivos de configuração do VS Code
        'migrations', # Ignorar arquivos de migração do Django por padrão
        # Pastas comuns dentro de ambientes virtuais (redundante se 'venv' ou 'env' for ignorado, mas seguro)
        'Include',
        'Lib',
        'Scripts'
    ]

    # Arquivos específicos a ignorar (mesmo que correspondam aos padrões)
    ignore_files = [
        'db.sqlite3', # Banco de dados SQLite
        '*.pyc', # Arquivos Python compilados
        '.gitignore', # Arquivo de configuração do Git
        'pyvenv.cfg' # Arquivo de configuração do ambiente virtual
    ]

    output = []
    output.append("=" * 100)
    output.append("🚀 PROJETO DJANGO: ENCURTADOR DE URL - ANÁLISE COMPLETA")
    output.append("=" * 100)

    # Informações básicas
    output.append(f"\n📋 PROJETO: {project_name}")
    output.append("🎯 TIPO: Django URL Shortener")
    # Usa root_directory para a base do caminho
    output.append("📅 ESTRUTURA CAPTURADA EM: " + os.path.abspath(root_directory))

    # Mapear estrutura
    output.append("\n📁 ESTRUTURA DO PROJETO:")
    output.append("─" * 50)

    # Usar os.walk a partir do diretório raiz especificado
    for root, dirs, files in os.walk(root_directory):
        # Remove pastas ignoradas da busca (modifica a lista dirs in-place)
        dirs[:] = [d for d in dirs if d not in ignore_dirs]

        # Calcula o nível de indentação
        # Se root_directory for '.', o primeiro root será '.', que tem 0 separadores.
        # Se root_directory for uma pasta específica, o primeiro root será essa pasta.
        # A lógica de nível precisa ser ajustada se o root_directory não for '.'
        # Para '.', level é o número de os.sep em root (excluindo o '.')
        # Para uma pasta específica, level é o número de os.sep em root - número de os.sep no root_directory
        # Simplificando para o caso de root_directory = '.'
        if root == '.':
            level = 0
            folder_name = project_name
        else:
            # Calcula o caminho relativo ao root_directory e conta os separadores
            relative_root = os.path.relpath(root, root_directory)
            level = relative_root.count(os.sep) + 1 # +1 porque o próprio subdiretório adiciona um nível
            folder_name = os.path.basename(root)

        indent = '│ ' * level
        output.append(f"{indent}├── 📁 {folder_name}/")

        # Mostrar arquivos relevantes neste diretório
        subindent = '│ ' * (level + 1)
        relevant_files = []
        for file in files:
            # Verifica se o arquivo corresponde a algum padrão E não está na lista de ignorados
            if any(fnmatch.fnmatch(file, pattern) for pattern in patterns):
                if not any(fnmatch.fnmatch(file, ignore) for ignore in ignore_files):
                    relevant_files.append(file)

        # Ordena os arquivos relevantes para uma saída consistente
        relevant_files.sort()

        for i, file in enumerate(relevant_files):
            connector = "└──" if i == len(relevant_files) - 1 else "├──"
            output.append(f"{subindent}{connector} 📄 {file}")

    output.append("\n" + "=" * 100)
    output.append("📝 CONTEÚDO DOS ARQUIVOS PRINCIPAIS:")
    output.append("=" * 100)

    # Ordem prioritária de arquivos comuns em projetos Django como o seu
    # Ajuste estes caminhos se a estrutura do seu projeto for diferente
    # Ex: 'encurtador/settings.py' assume que 'encurtador' é a pasta de configurações do projeto
    # 'urls/models.py' assume que 'urls' é a pasta do seu app principal
    priority_files = [
        os.path.join(root_directory, 'manage.py'),
        os.path.join(root_directory, 'requirements.txt'),
        os.path.join(root_directory, 'encurtador', 'settings.py'),
        os.path.join(root_directory, 'encurtador', 'urls.py'),
        os.path.join(root_directory, 'urls', 'models.py'),
        os.path.join(root_directory, 'urls', 'views.py'),
        os.path.join(root_directory, 'urls', 'urls.py'),
        os.path.join(root_directory, 'urls', 'admin.py'),
        os.path.join(root_directory, 'urls', 'apps.py')
    ]

    # Primeiro, processar arquivos prioritários
    output.append(f"\n{'🎯 ARQUIVOS PRINCIPAIS (ALTA PRIORIDADE)':=^90}")
    processed_files = set() # Usar um set para rastrear arquivos já processados (usando caminho absoluto)

    for priority_file in priority_files:
        if os.path.exists(priority_file):
            output.extend(process_file(priority_file, root_directory))
            processed_files.add(os.path.abspath(priority_file))

    # Depois, processar templates (procura em uma pasta 'templates' na raiz ou em subpastas de apps)
    # Este loop agora percorre o projeto para encontrar templates
    output.append(f"\n{'🎨 TEMPLATES HTML':=^90}")
    for root, dirs, files in os.walk(root_directory):
         # Remove pastas ignoradas da busca
        dirs[:] = [d for d in dirs if d not in ignore_dirs]

        for file in files:
            if file.endswith('.html'):
                 file_path = os.path.join(root, file)
                 abs_path = os.path.abspath(file_path)
                 # Processa apenas se não foi processado como arquivo prioritário
                 if abs_path not in processed_files:
                     output.extend(process_file(file_path, root_directory))
                     processed_files.add(abs_path)


    # Processar arquivos estáticos (CSS, JS) - Percorre as pastas static
    output.append(f"\n{'🎨 ARQUIVOS CSS':=^90}")
    output.append(f"\n{'⚙️ ARQUIVOS JAVASCRIPT':=^90}") # Agrupando CSS e JS para simplicidade no loop
    for root, dirs, files in os.walk(root_directory):
         # Remove pastas ignoradas da busca
        dirs[:] = [d for d in dirs if d not in ignore_dirs]

        # Verifica se estamos dentro de uma pasta 'static' ou subpasta dela
        # Uma abordagem mais robusta seria verificar se o caminho contém '/static/'
        is_static_dir = 'static' in root.split(os.sep)

        if is_static_dir:
            for file in files:
                file_path = os.path.join(root, file)
                abs_path = os.path.abspath(file_path)
                # Processa apenas se não foi processado
                if abs_path not in processed_files:
                    if file.endswith('.css') or file.endswith('.js'):
                        output.extend(process_file(file_path, root_directory))
                        processed_files.add(abs_path)


    # Processar arquivos restantes que correspondem aos padrões e não foram processados
    output.append(f"\n{'📄 OUTROS ARQUIVOS RELEVANTES':=^90}")
    for root, dirs, files in os.walk(root_directory):
        # Remove pastas ignoradas da busca
        dirs[:] = [d for d in dirs if d not in ignore_dirs]

        for file in files:
            file_path = os.path.join(root, file)
            abs_path = os.path.abspath(file_path)

            # Verifica se o arquivo não foi processado, corresponde aos padrões e não é ignorado
            if abs_path not in processed_files:
                if any(fnmatch.fnmatch(file, pattern) for pattern in patterns):
                    if not any(fnmatch.fnmatch(file, ignore) for ignore in ignore_files):
                        output.extend(process_file(file_path, root_directory))
                        processed_files.add(abs_path)

    # Salvar resultado
    output_file = 'projeto_consolidado_encurtador.txt' # Nome de arquivo mais específico
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(output))
        print("✅ Projeto consolidado salvo em:", output_file)
        print(f"📊 Total de linhas geradas: {len(output)}")
        print(f"📁 Arquivos processados: {len(processed_files)}")

        # Estatísticas
        file_stats = {}
        for file_path in processed_files:
            # Obtém a extensão do arquivo, incluindo o ponto
            ext = os.path.splitext(file_path)[1]
            # Se não tiver extensão, usa um marcador
            if not ext:
                ext = '[sem extensão]'
            file_stats[ext] = file_stats.get(ext, 0) + 1

        print("\n📈 ESTATÍSTICAS:")
        # Ordena as estatísticas pela extensão
        for ext, count in sorted(file_stats.items()):
            print(f" {ext}: {count} arquivos")

    except IOError as e:
        print(f"❌ Erro ao salvar o arquivo de saída '{output_file}': {e}")
    except Exception as e:
        print(f"❌ Ocorreu um erro inesperado durante o salvamento: {e}")


def process_file(file_path, root_directory):
    """Processa um arquivo individual, lê o conteúdo e formata a saída."""
    result = []
    # Obtém o caminho relativo ao diretório raiz do projeto
    relative_path = os.path.relpath(file_path, root_directory)

    result.append(f"\n{'─' * 80}")
    result.append(f"🏷️ ARQUIVO: {relative_path}")
    # Obtém o diretório relativo
    relative_dir = os.path.dirname(relative_path)
    result.append(f"📁 LOCALIZAÇÃO: {relative_dir if relative_dir else 'raiz'}")
    result.append(f"{'─' * 80}")

    try:
        # Tenta abrir e ler o arquivo com codificação UTF-8
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read().strip() # Remove espaços em branco do início/fim

        # Verificar tamanho do conteúdo (pode usar len(content) ou len(content.splitlines()))
        # Usar len(content) para um limite de tamanho em bytes/caracteres
        # Usar len(content.splitlines()) para um limite de linhas
        lines = content.splitlines() # Divide em linhas para contar e limitar
        line_limit = 100 # Limite de linhas para arquivos grandes
        char_limit = 15000 # Limite de caracteres (aprox. 15KB)

        if len(content) > char_limit and len(lines) > line_limit:
             result.append(f"⚠️ ARQUIVO GRANDE ({len(lines)} linhas, ~{len(content)} caracteres) - MOSTRANDO PRIMEIRAS {line_limit} LINHAS")
             result.append('\n'.join(lines[:line_limit]))
             result.append(f"\n... [RESTANTE OMITIDO - {len(lines)-line_limit} linhas restantes]")
        elif len(content) == 0:
            result.append("📝 [ARQUIVO VAZIO]")
        else:
            result.append(content) # Inclui o conteúdo completo se for pequeno

    except UnicodeDecodeError:
        # Captura erro se o arquivo não for UTF-8 (provavelmente binário)
        result.append("⚠️ [ARQUIVO BINÁRIO OU COM CODIFICAÇÃO DIFERENTE - NÃO PODE SER EXIBIDO COMO TEXTO]")
    except FileNotFoundError:
         # Embora os.walk encontre, é uma boa prática ter este catch
         result.append("❌ [ARQUIVO NÃO ENCONTRADO DURANTE O PROCESSAMENTO]")
    except Exception as e:
        # Captura quaisquer outros erros durante a leitura do arquivo
        result.append(f"❌ [ERRO AO LER ARQUIVO: {e}]")

    return result

# Bloco principal para executar a função quando o script for chamado diretamente
if __name__ == "__main__":
    print("🚀 Iniciando consolidação do projeto Django...")
    # O script assume que está sendo executado no diretório raiz do projeto ENCURTADOR-URL
    print("📁 Diretório atual:", os.getcwd())
    # Você pode adicionar uma verificação aqui para garantir que está no diretório correto
    # Ex: verificar se 'manage.py' existe no diretório atual
    if not os.path.exists('manage.py'):
        print("\n⚠️ Parece que você não está executando este script no diretório raiz do seu projeto Django.")
        print("Por favor, navegue até a pasta 'ENCURTADOR-URL' no seu terminal e execute o script novamente.")
        sys.exit(1) # Sai do script com código de erro

    consolidar_projeto()

────────────────────────────────────────────────────────────────────────────────
🏷️ ARQUIVO: shortener\admin.py
📁 LOCALIZAÇÃO: shortener
────────────────────────────────────────────────────────────────────────────────
# shortener/admin.py

from django.contrib import admin
from .models import ShortUrl

# Registra o modelo ShortUrl no site de administração (Primeiro registro)
# admin.site.register(ShortUrl) # <-- Comente ou remova esta linha

# Opcional: Personalizar a exibição no Admin
class ShortUrlAdmin(admin.ModelAdmin): # <-- Mantenha esta classe descomentada
    list_display = ('short_code', 'long_url', 'created_at', 'expires_at', 'is_expired')
    list_filter = ('created_at', 'expires_at')
    search_fields = ('short_code', 'long_url')
    readonly_fields = ('created_at',) # Não permite editar a data de criação

admin.site.register(ShortUrl, ShortUrlAdmin) # <-- Mantenha esta linha descomentada

────────────────────────────────────────────────────────────────────────────────
🏷️ ARQUIVO: shortener\apps.py
📁 LOCALIZAÇÃO: shortener
────────────────────────────────────────────────────────────────────────────────
from django.apps import AppConfig


class ShortenerConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'shortener'

────────────────────────────────────────────────────────────────────────────────
🏷️ ARQUIVO: shortener\forms.py
📁 LOCALIZAÇÃO: shortener
────────────────────────────────────────────────────────────────────────────────
# shortener/forms.py - CÓDIGO CORRIGIDO

from django import forms
# Importa o modelo ShortUrl do arquivo models.py
from .models import ShortUrl

# Define o formulário baseado no modelo ShortUrl
class ShortenUrlForm(forms.ModelForm):
    class Meta:
        # Especifica qual modelo este formulário está associado
        model = ShortUrl
        # Define quais campos do modelo serão incluídos no formulário
        fields = ['long_url', 'expires_at']
        widgets = {
            # Opcional: Adicionar um widget de calendário para expires_at
            # Isso requer configuração adicional, como um DatePicker/DateTimePicker
            # Por enquanto, um Input normal funciona, mas o usuário precisa digitar no formato correto
            'expires_at': forms.DateTimeInput(attrs={'type': 'datetime-local'}),
        }

# Não há mais a definição da classe ShortUrl(models.Model) aqui!
# Ela reside APENAS em shortener/models.py

────────────────────────────────────────────────────────────────────────────────
🏷️ ARQUIVO: shortener\models.py
📁 LOCALIZAÇÃO: shortener
────────────────────────────────────────────────────────────────────────────────
# shortener/models.py

from django.db import models
from django.utils import timezone

class ShortUrl(models.Model):
    long_url = models.URLField(max_length=2000) # Não unique=True mais
    short_code = models.CharField(max_length=10, unique=True) # Código curto deve ser único
    created_at = models.DateTimeField(auto_now_add=True) # Data e hora de criação
    expires_at = models.DateTimeField(null=True, blank=True) # Data e hora de expiração (opcional)
    clicks = models.PositiveIntegerField(default=0) # Campo para contar os cliques

    def __str__(self):
        # Representação em string do objeto, útil no Admin
        return f'{self.short_code} -> {self.long_url}'

    def is_expired(self):
        """Verifica se a URL curta expirou."""
        # Retorna False se expires_at for None (não expira)
        # Retorna True se expires_at for no passado
        if self.expires_at:
            return self.expires_at < timezone.now()
        return False # Não expira se expires_at for None

    class Meta:
        # Ordena os resultados por data de criação por padrão
        ordering = ['-created_at']

────────────────────────────────────────────────────────────────────────────────
🏷️ ARQUIVO: shortener\tests.py
📁 LOCALIZAÇÃO: shortener
────────────────────────────────────────────────────────────────────────────────
from django.test import TestCase

# Create your tests here.

────────────────────────────────────────────────────────────────────────────────
🏷️ ARQUIVO: shortener\urls.py
📁 LOCALIZAÇÃO: shortener
────────────────────────────────────────────────────────────────────────────────
# shortener/urls.py

from django.urls import path
# Importa todas as views do seu app
from . import views

# Define os padrões de URL para o app 'shortener'
urlpatterns = [
    # URL para a página inicial (formulário e lista)
    # Mapeia a URL raiz '' para a view index e nomeia como 'index'
    path('', views.index, name='index'),

    # --- Adicionado: URL para a página de status ---
    # Mapeia URLs que começam com 'status/' seguidas por uma string (código curto)
    # para a view status_short_url e nomeia como 'status_short_url'
    # A ordem importa: URLs mais específicas (como 'status/') devem vir antes das menos específicas
    path('status/<str:short_code>/', views.status_short_url, name='status_short_url'),

    # URL para redirecionar o código curto
    # Mapeia qualquer string (código curto) na raiz para a view redirect_short_url
    # e nomeia como 'redirect_short_url'
    path('<str:short_code>/', views.redirect_short_url, name='redirect_short_url'),
]

────────────────────────────────────────────────────────────────────────────────
🏷️ ARQUIVO: shortener\views.py
📁 LOCALIZAÇÃO: shortener
────────────────────────────────────────────────────────────────────────────────
# shortener/views.py

from django.shortcuts import render, redirect, get_object_or_404
from django.http import HttpResponse, HttpResponseRedirect, HttpResponseNotFound
from django.utils import timezone
from .models import ShortUrl
from .forms import ShortenUrlForm
import string
import random

def generate_short_code(length=6):
    """Gera um código curto alfanumérico único."""
    characters = string.ascii_letters + string.digits
    while True:
        code = ''.join(random.choice(characters) for _ in range(length))
        # Verifica se o código já existe no banco de dados
        if not ShortUrl.objects.filter(short_code=code).exists():
            return code
        # Se existir, tenta gerar outro (evita colisões)

def index(request):
    """View para a página inicial (formulário de criação e lista de URLs)."""
    short_url_object = None # Variável para armazenar a URL curta criada, se houver

    if request.method == 'POST':
        form = ShortenUrlForm(request.POST)
        if form.is_valid():
            long_url = form.cleaned_data['long_url']
            expires_at = form.cleaned_data['expires_at']

            # Gera um código curto único
            code = generate_short_code()
            # Cria e salva o objeto ShortUrl no banco de dados
            short_url_object = ShortUrl.objects.create(
                long_url=long_url,
                short_code=code,
                expires_at=expires_at
            )
            # Não redirecionamos aqui, apenas mostramos o resultado na mesma página

    else: # request.method == 'GET'
        form = ShortenUrlForm()

    # --- Adicionado: Busca todos os objetos ShortUrl para exibir na lista ---
    # O .all() busca todos os registros da tabela ShortUrl
    # A ordenação padrão é definida no Meta do modelo (-created_at)
    all_urls = ShortUrl.objects.all()

    # Renderiza o template, passando o formulário, o objeto ShortUrl (se criado) e a lista de todas as URLs
    return render(request, 'shortener/index.html', {
        'form': form,
        'short_url_object': short_url_object, # Objeto da URL criada na submissão POST (pode ser None em GET)
        'all_urls': all_urls, # Lista de todas as URLs para exibir
    })

def redirect_short_url(request, short_code):
    """View para redirecionar o código curto para a URL longa e contar cliques."""
    # Tenta encontrar o objeto ShortUrl pelo código curto
    # get_object_or_404 retorna o objeto ou um erro 404 se não encontrar
    url_mapping = get_object_or_404(ShortUrl, short_code=short_code)

    # Verifica se a URL curta expirou usando o método do modelo
    if url_mapping.is_expired():
        # Se expirou, renderiza uma página de erro 410 Gone (Removido Permanentemente)
        # Opcional: url_mapping.delete() # Descomente para deletar URLs expiradas ao acessar
        return render(request, 'shortener/expired.html', {'short_code': short_code}, status=410)

    # --- Adicionado: Incrementa o contador de cliques ---
    url_mapping.clicks += 1 # Soma 1 ao campo clicks
    url_mapping.save()   # Salva a alteração no banco de dados

    # Se não expirou, redireciona para a URL longa
    return HttpResponseRedirect(url_mapping.long_url)

# --- Nova View: Página de Status da URL ---
def status_short_url(request, short_code):
    """View para exibir a página de status de uma URL curta."""
    # Tenta encontrar o objeto ShortUrl pelo código curto
    # get_object_or_404 retorna o objeto ou um erro 404 se não encontrar
    url_object = get_object_or_404(ShortUrl, short_code=short_code)

    # Renderiza o template de status, passando o objeto ShortUrl encontrado
    return render(request, 'shortener/status.html', {
        'short_url_object': url_object, # Objeto da URL para exibir os detalhes
    })

────────────────────────────────────────────────────────────────────────────────
🏷️ ARQUIVO: shortener\__init__.py
📁 LOCALIZAÇÃO: shortener
────────────────────────────────────────────────────────────────────────────────
📝 [ARQUIVO VAZIO]

────────────────────────────────────────────────────────────────────────────────
🏷️ ARQUIVO: url_shortener_project\asgi.py
📁 LOCALIZAÇÃO: url_shortener_project
────────────────────────────────────────────────────────────────────────────────
"""
ASGI config for url_shortener_project project.

It exposes the ASGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/asgi/
"""

import os

from django.core.asgi import get_asgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'url_shortener_project.settings')

application = get_asgi_application()

────────────────────────────────────────────────────────────────────────────────
🏷️ ARQUIVO: url_shortener_project\settings.py
📁 LOCALIZAÇÃO: url_shortener_project
────────────────────────────────────────────────────────────────────────────────
"""
Django settings for url_shortener_project project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-3&dq*hx__abl7l$+u+&*id7ags(h=w#l*hhw)6w#6$qi3r!cb4'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'shortener',
    'django.contrib.humanize',  # Your URL shortener app

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'url_shortener_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'url_shortener_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

────────────────────────────────────────────────────────────────────────────────
🏷️ ARQUIVO: url_shortener_project\urls.py
📁 LOCALIZAÇÃO: url_shortener_project
────────────────────────────────────────────────────────────────────────────────
# url_shortener_project/urls.py

from django.contrib import admin
from django.urls import path, include # Importe include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('shortener.urls')), # <-- Inclui as URLs do app shortener
]

────────────────────────────────────────────────────────────────────────────────
🏷️ ARQUIVO: url_shortener_project\wsgi.py
📁 LOCALIZAÇÃO: url_shortener_project
────────────────────────────────────────────────────────────────────────────────
"""
WSGI config for url_shortener_project project.

It exposes the WSGI callable as a module-level variable named ``application``.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/howto/deployment/wsgi/
"""

import os

from django.core.wsgi import get_wsgi_application

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'url_shortener_project.settings')

application = get_wsgi_application()

────────────────────────────────────────────────────────────────────────────────
🏷️ ARQUIVO: url_shortener_project\__init__.py
📁 LOCALIZAÇÃO: url_shortener_project
────────────────────────────────────────────────────────────────────────────────
📝 [ARQUIVO VAZIO]