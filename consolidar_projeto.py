# consolidar_projeto.py
import os
import fnmatch
import sys # Importar sys para verificar a codifica√ß√£o padr√£o, se necess√°rio, embora utf-8 seja padr√£o e bom.

def consolidar_projeto():
    # Estrutura espec√≠fica do seu projeto
    # Assumimos que o script ser√° executado a partir do diret√≥rio raiz do projeto "ENCURTADOR-URL"
    project_name = "ENCURTADOR-URL"
    root_directory = "." # O ponto indica o diret√≥rio atual (raiz do projeto)

    # Arquivos que queremos incluir (por padr√£o, tudo que corresponder a estes padr√µes)
    patterns = [
        '*.py',
        '*.html',
        '*.css',
        '*.js',
        'requirements.txt',
        '*.md',
        '*.txt'
    ]

    # Pastas a ignorar COMPLETAMENTE durante a busca
    ignore_dirs = [
        '__pycache__',
        '.git',
        'venv', # Seu ambiente virtual
        'env', # Outro nome comum para ambiente virtual
        'node_modules', # Se usar frontend com Node.js
        'staticfiles', # Django collectstatic
        '.vscode', # Arquivos de configura√ß√£o do VS Code
        'migrations', # Ignorar arquivos de migra√ß√£o do Django por padr√£o
        # Pastas comuns dentro de ambientes virtuais (redundante se 'venv' ou 'env' for ignorado, mas seguro)
        'Include',
        'Lib',
        'Scripts'
    ]

    # Arquivos espec√≠ficos a ignorar (mesmo que correspondam aos padr√µes)
    ignore_files = [
        'db.sqlite3', # Banco de dados SQLite
        '*.pyc', # Arquivos Python compilados
        '.gitignore', # Arquivo de configura√ß√£o do Git
        'pyvenv.cfg' # Arquivo de configura√ß√£o do ambiente virtual
    ]

    output = []
    output.append("=" * 100)
    output.append("üöÄ PROJETO DJANGO: ENCURTADOR DE URL - AN√ÅLISE COMPLETA")
    output.append("=" * 100)

    # Informa√ß√µes b√°sicas
    output.append(f"\nüìã PROJETO: {project_name}")
    output.append("üéØ TIPO: Django URL Shortener")
    # Usa root_directory para a base do caminho
    output.append("üìÖ ESTRUTURA CAPTURADA EM: " + os.path.abspath(root_directory))

    # Mapear estrutura
    output.append("\nüìÅ ESTRUTURA DO PROJETO:")
    output.append("‚îÄ" * 50)

    # Usar os.walk a partir do diret√≥rio raiz especificado
    for root, dirs, files in os.walk(root_directory):
        # Remove pastas ignoradas da busca (modifica a lista dirs in-place)
        dirs[:] = [d for d in dirs if d not in ignore_dirs]

        # Calcula o n√≠vel de indenta√ß√£o
        # Se root_directory for '.', o primeiro root ser√° '.', que tem 0 separadores.
        # Se root_directory for uma pasta espec√≠fica, o primeiro root ser√° essa pasta.
        # A l√≥gica de n√≠vel precisa ser ajustada se o root_directory n√£o for '.'
        # Para '.', level √© o n√∫mero de os.sep em root (excluindo o '.')
        # Para uma pasta espec√≠fica, level √© o n√∫mero de os.sep em root - n√∫mero de os.sep no root_directory
        # Simplificando para o caso de root_directory = '.'
        if root == '.':
            level = 0
            folder_name = project_name
        else:
            # Calcula o caminho relativo ao root_directory e conta os separadores
            relative_root = os.path.relpath(root, root_directory)
            level = relative_root.count(os.sep) + 1 # +1 porque o pr√≥prio subdiret√≥rio adiciona um n√≠vel
            folder_name = os.path.basename(root)

        indent = '‚îÇ ' * level
        output.append(f"{indent}‚îú‚îÄ‚îÄ üìÅ {folder_name}/")

        # Mostrar arquivos relevantes neste diret√≥rio
        subindent = '‚îÇ ' * (level + 1)
        relevant_files = []
        for file in files:
            # Verifica se o arquivo corresponde a algum padr√£o E n√£o est√° na lista de ignorados
            if any(fnmatch.fnmatch(file, pattern) for pattern in patterns):
                if not any(fnmatch.fnmatch(file, ignore) for ignore in ignore_files):
                    relevant_files.append(file)

        # Ordena os arquivos relevantes para uma sa√≠da consistente
        relevant_files.sort()

        for i, file in enumerate(relevant_files):
            connector = "‚îî‚îÄ‚îÄ" if i == len(relevant_files) - 1 else "‚îú‚îÄ‚îÄ"
            output.append(f"{subindent}{connector} üìÑ {file}")

    output.append("\n" + "=" * 100)
    output.append("üìù CONTE√öDO DOS ARQUIVOS PRINCIPAIS:")
    output.append("=" * 100)

    # Ordem priorit√°ria de arquivos comuns em projetos Django como o seu
    # Ajuste estes caminhos se a estrutura do seu projeto for diferente
    # Ex: 'encurtador/settings.py' assume que 'encurtador' √© a pasta de configura√ß√µes do projeto
    # 'urls/models.py' assume que 'urls' √© a pasta do seu app principal
    priority_files = [
        os.path.join(root_directory, 'manage.py'),
        os.path.join(root_directory, 'requirements.txt'),
        os.path.join(root_directory, 'encurtador', 'settings.py'),
        os.path.join(root_directory, 'encurtador', 'urls.py'),
        os.path.join(root_directory, 'urls', 'models.py'),
        os.path.join(root_directory, 'urls', 'views.py'),
        os.path.join(root_directory, 'urls', 'urls.py'),
        os.path.join(root_directory, 'urls', 'admin.py'),
        os.path.join(root_directory, 'urls', 'apps.py')
    ]

    # Primeiro, processar arquivos priorit√°rios
    output.append(f"\n{'üéØ ARQUIVOS PRINCIPAIS (ALTA PRIORIDADE)':=^90}")
    processed_files = set() # Usar um set para rastrear arquivos j√° processados (usando caminho absoluto)

    for priority_file in priority_files:
        if os.path.exists(priority_file):
            output.extend(process_file(priority_file, root_directory))
            processed_files.add(os.path.abspath(priority_file))

    # Depois, processar templates (procura em uma pasta 'templates' na raiz ou em subpastas de apps)
    # Este loop agora percorre o projeto para encontrar templates
    output.append(f"\n{'üé® TEMPLATES HTML':=^90}")
    for root, dirs, files in os.walk(root_directory):
         # Remove pastas ignoradas da busca
        dirs[:] = [d for d in dirs if d not in ignore_dirs]

        for file in files:
            if file.endswith('.html'):
                 file_path = os.path.join(root, file)
                 abs_path = os.path.abspath(file_path)
                 # Processa apenas se n√£o foi processado como arquivo priorit√°rio
                 if abs_path not in processed_files:
                     output.extend(process_file(file_path, root_directory))
                     processed_files.add(abs_path)


    # Processar arquivos est√°ticos (CSS, JS) - Percorre as pastas static
    output.append(f"\n{'üé® ARQUIVOS CSS':=^90}")
    output.append(f"\n{'‚öôÔ∏è ARQUIVOS JAVASCRIPT':=^90}") # Agrupando CSS e JS para simplicidade no loop
    for root, dirs, files in os.walk(root_directory):
         # Remove pastas ignoradas da busca
        dirs[:] = [d for d in dirs if d not in ignore_dirs]

        # Verifica se estamos dentro de uma pasta 'static' ou subpasta dela
        # Uma abordagem mais robusta seria verificar se o caminho cont√©m '/static/'
        is_static_dir = 'static' in root.split(os.sep)

        if is_static_dir:
            for file in files:
                file_path = os.path.join(root, file)
                abs_path = os.path.abspath(file_path)
                # Processa apenas se n√£o foi processado
                if abs_path not in processed_files:
                    if file.endswith('.css') or file.endswith('.js'):
                        output.extend(process_file(file_path, root_directory))
                        processed_files.add(abs_path)


    # Processar arquivos restantes que correspondem aos padr√µes e n√£o foram processados
    output.append(f"\n{'üìÑ OUTROS ARQUIVOS RELEVANTES':=^90}")
    for root, dirs, files in os.walk(root_directory):
        # Remove pastas ignoradas da busca
        dirs[:] = [d for d in dirs if d not in ignore_dirs]

        for file in files:
            file_path = os.path.join(root, file)
            abs_path = os.path.abspath(file_path)

            # Verifica se o arquivo n√£o foi processado, corresponde aos padr√µes e n√£o √© ignorado
            if abs_path not in processed_files:
                if any(fnmatch.fnmatch(file, pattern) for pattern in patterns):
                    if not any(fnmatch.fnmatch(file, ignore) for ignore in ignore_files):
                        output.extend(process_file(file_path, root_directory))
                        processed_files.add(abs_path)

    # Salvar resultado
    output_file = 'projeto_consolidado_encurtador.txt' # Nome de arquivo mais espec√≠fico
    try:
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write('\n'.join(output))
        print("‚úÖ Projeto consolidado salvo em:", output_file)
        print(f"üìä Total de linhas geradas: {len(output)}")
        print(f"üìÅ Arquivos processados: {len(processed_files)}")

        # Estat√≠sticas
        file_stats = {}
        for file_path in processed_files:
            # Obt√©m a extens√£o do arquivo, incluindo o ponto
            ext = os.path.splitext(file_path)[1]
            # Se n√£o tiver extens√£o, usa um marcador
            if not ext:
                ext = '[sem extens√£o]'
            file_stats[ext] = file_stats.get(ext, 0) + 1

        print("\nüìà ESTAT√çSTICAS:")
        # Ordena as estat√≠sticas pela extens√£o
        for ext, count in sorted(file_stats.items()):
            print(f" {ext}: {count} arquivos")

    except IOError as e:
        print(f"‚ùå Erro ao salvar o arquivo de sa√≠da '{output_file}': {e}")
    except Exception as e:
        print(f"‚ùå Ocorreu um erro inesperado durante o salvamento: {e}")


def process_file(file_path, root_directory):
    """Processa um arquivo individual, l√™ o conte√∫do e formata a sa√≠da."""
    result = []
    # Obt√©m o caminho relativo ao diret√≥rio raiz do projeto
    relative_path = os.path.relpath(file_path, root_directory)

    result.append(f"\n{'‚îÄ' * 80}")
    result.append(f"üè∑Ô∏è ARQUIVO: {relative_path}")
    # Obt√©m o diret√≥rio relativo
    relative_dir = os.path.dirname(relative_path)
    result.append(f"üìÅ LOCALIZA√á√ÉO: {relative_dir if relative_dir else 'raiz'}")
    result.append(f"{'‚îÄ' * 80}")

    try:
        # Tenta abrir e ler o arquivo com codifica√ß√£o UTF-8
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read().strip() # Remove espa√ßos em branco do in√≠cio/fim

        # Verificar tamanho do conte√∫do (pode usar len(content) ou len(content.splitlines()))
        # Usar len(content) para um limite de tamanho em bytes/caracteres
        # Usar len(content.splitlines()) para um limite de linhas
        lines = content.splitlines() # Divide em linhas para contar e limitar
        line_limit = 100 # Limite de linhas para arquivos grandes
        char_limit = 15000 # Limite de caracteres (aprox. 15KB)

        if len(content) > char_limit and len(lines) > line_limit:
             result.append(f"‚ö†Ô∏è ARQUIVO GRANDE ({len(lines)} linhas, ~{len(content)} caracteres) - MOSTRANDO PRIMEIRAS {line_limit} LINHAS")
             result.append('\n'.join(lines[:line_limit]))
             result.append(f"\n... [RESTANTE OMITIDO - {len(lines)-line_limit} linhas restantes]")
        elif len(content) == 0:
            result.append("üìù [ARQUIVO VAZIO]")
        else:
            result.append(content) # Inclui o conte√∫do completo se for pequeno

    except UnicodeDecodeError:
        # Captura erro se o arquivo n√£o for UTF-8 (provavelmente bin√°rio)
        result.append("‚ö†Ô∏è [ARQUIVO BIN√ÅRIO OU COM CODIFICA√á√ÉO DIFERENTE - N√ÉO PODE SER EXIBIDO COMO TEXTO]")
    except FileNotFoundError:
         # Embora os.walk encontre, √© uma boa pr√°tica ter este catch
         result.append("‚ùå [ARQUIVO N√ÉO ENCONTRADO DURANTE O PROCESSAMENTO]")
    except Exception as e:
        # Captura quaisquer outros erros durante a leitura do arquivo
        result.append(f"‚ùå [ERRO AO LER ARQUIVO: {e}]")

    return result

# Bloco principal para executar a fun√ß√£o quando o script for chamado diretamente
if __name__ == "__main__":
    print("üöÄ Iniciando consolida√ß√£o do projeto Django...")
    # O script assume que est√° sendo executado no diret√≥rio raiz do projeto ENCURTADOR-URL
    print("üìÅ Diret√≥rio atual:", os.getcwd())
    # Voc√™ pode adicionar uma verifica√ß√£o aqui para garantir que est√° no diret√≥rio correto
    # Ex: verificar se 'manage.py' existe no diret√≥rio atual
    if not os.path.exists('manage.py'):
        print("\n‚ö†Ô∏è Parece que voc√™ n√£o est√° executando este script no diret√≥rio raiz do seu projeto Django.")
        print("Por favor, navegue at√© a pasta 'ENCURTADOR-URL' no seu terminal e execute o script novamente.")
        sys.exit(1) # Sai do script com c√≥digo de erro

    consolidar_projeto()
